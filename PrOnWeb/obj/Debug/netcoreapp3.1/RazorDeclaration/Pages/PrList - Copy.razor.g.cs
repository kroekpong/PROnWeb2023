// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PrOnWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using PrOnWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using PrOnWeb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using PrOnWeb.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\Pages\PrList - Copy.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\Pages\PrList - Copy.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\Pages\PrList - Copy.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\Pages\PrList - Copy.razor"
           [Authorize]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/prlist")]
    public partial class PrList___Copy : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 64 "D:\KHOTDEE\TPCC_Project\PrOnWeb\PrOnWeb\Pages\PrList - Copy.razor"
       
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    SfGrid<PrListModel> gridRef;
    private AuthenticationState authState;
    ClaimsPrincipal MyClaims = new ClaimsPrincipal();

    List<vPRHeader> prHeaders = new List<vPRHeader>();
    private string fullName;
    int myUserId;

    List<PrListModel> prLists;
    List<PrListModel> viewPrLists;
    bool isActive = true;

    public class DistinctItemComparer : IEqualityComparer<PrListModel>
    {
        public bool Equals(PrListModel x, PrListModel y)
        {
            return x.Id == y.Id;
        }
        public int GetHashCode(PrListModel obj)
        {
            return obj.Id.GetHashCode();
        }
    }

    //===========================================================
    protected override async Task OnInitializedAsync()
    {
        string myODSs;
        string myODs;
        string myCompanies;
        prLists = new List<PrListModel>();

        authState = await _authState;
        MyClaims = (await _authState).User;

        if (MyClaims.Identity.IsAuthenticated)
        {
            myUserId = Int16.Parse(MyClaims.Claims.FirstOrDefault(c => c.Type == "PrUserId").Value);
            myODSs = await prDataService.GetODSsFromUserIdAsync(myUserId);
            myODs = await prDataService.GetODsFromUserIdAsync(myUserId);
            myCompanies = await prDataService.GetCompaniesFromUserIdAsync(myUserId);

            // Case 1 : Requester
            if (MyClaims.IsInRole("Requester"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase1(myUserId, myODSs));
            }
            // Case 2 : Role อื่น by Name
            prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase2(myUserId));
            // Case 3 : Role อื่น by role : SM, DM, AC, CS
            if (MyClaims.IsInRole("SMs"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase3_1("SM", myODSs));
            }
            if (MyClaims.IsInRole("DMs"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase3_1("DM", myODs));
            }
            if (MyClaims.IsInRole("Accountings"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase3_2("PAAC", myCompanies));
            }
            if (MyClaims.IsInRole("ADCoSigner"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase3_2("CSAD", myCompanies));
            }
            if (MyClaims.IsInRole("ITCoSigner"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase3_2("CSIT", myCompanies));
            }
            if (MyClaims.IsInRole("QCCoSigner"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase3_2("CSQC", myCompanies));
            }
            if (MyClaims.IsInRole("SECoSigner"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase3_2("CSSE", myCompanies));
            }
            // Case 4 : PS Manager
            if (MyClaims.IsInRole("PSManager"))
            {
                if (MyClaims.IsInRole("PF"))
                {
                    prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase4("PDRY"));
                }
                if (MyClaims.IsInRole("PH"))
                {
                    prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase4("PDHO"));
                }
            }
            // Case 5 : Purchaser
            if (MyClaims.IsInRole("PF"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase5(myUserId));
            }
            if (MyClaims.IsInRole("PH"))
            {
                prLists.AddRange(await prMainService.GetPrListApprovalNameAsyncCase5(myUserId));
            }
        }
        prLists = prLists.Distinct(new DistinctItemComparer()).ToList();

        viewPrLists = prLists.Where(x => x.List_Level < 8).ToList();
        viewPrLists = viewPrLists.Where(x => x.Pr_No.Substring(0, 2) != "L-").ToList();

    }

    private void Navigate(PrListModel prHeader1)
    {
        navigationManager.NavigateTo($"prform/{prHeader1.Id}");
    }
    private void vNavigate(VPrList prList1)
    {
        navigationManager.NavigateTo($"prform/{prList1.Id}");
    }

    private void ActiveClick()
    {
        if (isActive == true)
        {
            isActive = false;
            viewPrLists = prLists.Where(x => x.Pr_No.Substring(0, 2) != "L-").ToList();
        }
        else
        {
            isActive = true;
            viewPrLists = prLists.Where(x => x.List_Level < 8).ToList();
            viewPrLists = viewPrLists.Where(x => x.Pr_No.Substring(0, 2) != "L-").ToList();
        }
        gridRef.Refresh();

    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PrOnWeb.Services.PrMainService prMainService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PrOnWeb.Services.PrDataService prDataService { get; set; }
    }
}
#pragma warning restore 1591
