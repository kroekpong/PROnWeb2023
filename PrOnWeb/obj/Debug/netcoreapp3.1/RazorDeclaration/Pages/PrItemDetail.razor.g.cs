// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PrOnWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using PrOnWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using PrOnWeb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
using PrOnWeb.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    public partial class PrItemDetail : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 169 "D:\KHOTDEE_WORK\TPAC_TPCC\PR Online\PrOnWeb\PrOnWeb_No_Git\PrOnWeb\Pages\PrItemDetail.razor"
       
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;
    ClaimsPrincipal MyClaims = new ClaimsPrincipal();
    int myUserId;
    int thisPrId;

    //[Parameter]
    public PRItem thisPrItem { get; set; }
    [Parameter] public EventCallback onDlgClose { get; set; }

    bool isPMHO = false;// Head Office Purchasing Manager
    bool isPMRY = false;// Rayong Purchasing Manager
    bool isPurchaser = false;
    bool isNotPurchaser = true;
    bool isPRCreateWeb = false;
    bool disCanGRDATE = true;

    bool isStaffChooser = false;
    bool isCloseAble = false;

    //bool isShowButton = false;
    //bool isRnExist = false;
    bool isItemCloseNotEditable = true;
    string prQty = "0.00";
    //List<UserTable> userTables;
    Approval_flow myApproval_flow;
    //List<Approval_flow> approval_Flows;
    IList<ApplicationUser> usersOfRole;

    //public string UploadPath = "images";
    //public int MaxUploadFileSize = 10000000;
    //public List<SystemConfiguration> configs;

    double ItemAmt;

    //=============================================================
    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        MyClaims = (await _authState).User;

        if (MyClaims.Identity.IsAuthenticated)
        {
            myUserId = Int16.Parse(MyClaims.Claims.FirstOrDefault(c => c.Type == "PrUserId").Value);
            if (MyClaims.IsInRole("PSManager"))
            {
                var myWorkflowAutho = await prDataService.GetWorkflowAuthosAsync(myUserId);
                foreach (var item in myWorkflowAutho)
                {
                    if (item.Dep == "PH")
                    {
                        isPMHO = true;
                    }
                    if (item.Dep == "PF")
                    {
                        isPMRY = true;
                    }
                }
            }

            if (MyClaims.IsInRole("Requester"))
            {
                disCanGRDATE = false;
            }
            else
            {
                disCanGRDATE = true;
            }

        }

        //if (thisPrItem != null && thisPrItem.PrHeaders != null && thisPrItem.PrHeaders.Pr_No.StartsWith("PRW"))
        //    {
        //    isPRCreateWeb = true;
        //    }

        // List of purchasing stuff
        // RY or HO
        if (isPMRY)
        {
            usersOfRole = await _UserManager.GetUsersInRoleAsync("PF");
        }
        else if (isPMHO)
        {
            usersOfRole = await _UserManager.GetUsersInRoleAsync("PH");
        }
        else
        {
            IList<ApplicationUser> usersOfRole1 = await _UserManager.GetUsersInRoleAsync("PF");
            IList<ApplicationUser> usersOfRole2 = await _UserManager.GetUsersInRoleAsync("PH");
            usersOfRole = usersOfRole1.Concat(usersOfRole2).ToList();
        }
    }

    public int SelectedStaffId;
    public string ChangeValue { get; set; } = "";

    public async Task OnSaveStaff()
    {
        SelectedStaffId = thisPrItem.Purchasing_Staff_Id;
        thisPrItem.Purchasing_Staff = usersOfRole.Where(x => x.PrUserId == SelectedStaffId.ToString()).FirstOrDefault().UserName;
        thisPrItem.Staff_assign_date = DateTime.Now;
        await prMainService.UpdatePRItemAsync(thisPrItem);

        // check ว่า ได้ assign ครบทุกรายการหรือยัง
        List<PRItem> prItems;
        prItems = await prMainService.GetPrItemsAsync(thisPrId);
        bool isAllAssign = true;
        foreach (var item in prItems)
        {
            if (item.Purchasing_Staff_Id == 0 && item.PR_Closed == false && !item.Delete_Status.StartsWith("DELE"))
            {
                isAllAssign = false;
            }
        }
        int thisApprovalFlowId = 0;
        if (isAllAssign)
        {
            var thisPrApproval_Flows = await prDataService.GetvApprovalFlowPrHeadAsync(thisPrId);
            foreach (var item in thisPrApproval_Flows)
            {
                if (item.Approver_role.StartsWith("PD"))
                {
                    thisApprovalFlowId = item.Id;
                }
            }
            if (thisApprovalFlowId != 0)
            {
                myApproval_flow = await prDataService.GetApprovalFlowFromIdAsync(thisApprovalFlowId);
                // ทำการบันทึก Status การ Approve
                myApproval_flow.Status = "A";
                myApproval_flow.When_end = DateTime.Now;
                myApproval_flow.Approver_id = myUserId;
                await prDataService.UpdateApprovalFlowAsync(myApproval_flow);
            }
        }
        await onDlgClose.InvokeAsync("");
    }

    public async Task InitThisItem(PRItem PrItem, int PrId)
    {
        thisPrId = PrId;
        if (PrItem != null)
        {
            var thisPrHeader = await prMainService.GetvPrHeaderAsync(PrId);
            var prStatus = thisPrHeader.Status;

            thisPrItem = PrItem;
            prQty = thisPrItem.Quantity.ToString("0.00");
            // ปัญหา Price Unit เป็น 0
            ItemAmt = thisPrItem.Quantity * thisPrItem.Price_PR / thisPrItem.Price_Unit;

            // Choose staff ได้ เฉพาะ : Status = PDxx, และ เป็น PR ของเรา และ item นี้ยังไม่ close
            isStaffChooser = false;
            if (thisPrItem.PR_Closed != true &&
                (((prStatus == "PDRY" || prStatus == "RN") && isPMRY) || ((prStatus == "PDHO" || prStatus == "RN") && isPMHO)))
            {
                isStaffChooser = true;
            }

            isPurchaser = false;
            if (thisPrItem.Purchasing_Staff_Id == myUserId) // I am the purchaser
            {
                isPurchaser = true;
            }


            //var rn = await prDataService.GetReturningNoteFromItemAsync(thisPrItem.Id);
            //if (rn == null)
            //{
            //    isRnExist = false;
            //}
            //else isRnExist = true;

            // get current Item status
            //approval_Flows = await prDataService.GetApprovalFlowAsync(thisPrItem.Id);
            //foreach (Approval_flow approval_Flow in approval_Flows)
            //{
            //    // if approver_role = A and status = N or M and I'm isAccounting then ShowButton
            //    if (approval_Flow.Approver_role == "A" && approval_Flow.Status == "N")
            //    {
            //        List<WorkflowAutho> x = await prDataService.GetWorkflowAuthosAsync(myUserId);
            //        if (x.Any()) // some member
            //        {
            //            if (x.First().IsAccount)
            //            {
            //                myApproval_flow = approval_Flow;
            //                isShowButton = true;
            //            };
            //        }
            //    }
            //    if (approval_Flow.Approver_role == "C" && approval_Flow.Status == "N")
            //    {
            //        List<WorkflowAutho> x = await prDataService.GetWorkflowAuthosAsync(myUserId);
            //        if (x.Any()) // some member
            //        {
            //            if (x.First().IsCoSign)
            //            {
            //                myApproval_flow = approval_Flow;
            //                isShowButton = true;
            //            };
            //        }
            //    }
            //    if (approval_Flow.Approver_id == myUserId)
            //    {
            //        myApproval_flow = approval_Flow;
            //        if (approval_Flow.Status == "N")
            //        {
            //            isShowButton = true;
            //        }
            //    }
            //    //else
            //    //    isShowButton = false;
            //}
            //await GetUploadFileList();




            if (thisPrItem.PR_Closed == false) // ถ้า ยังไม่close
            {
                isPurchaser = false;
                if (thisPrItem.Purchasing_Staff_Id == myUserId) // I am the purchaser
                {
                    isPurchaser = true;
                    isItemCloseNotEditable = false;
                }
                if (MyClaims.IsInRole("Requester"))
                {
                    isItemCloseNotEditable = true;
                }
                else
                {
                    isItemCloseNotEditable = false;
                }
            }
            else // item closed
            {
                isItemCloseNotEditable = true;
            }



            this.StateHasChanged();
        }
    }

    //private async Task loadConfiguration()
    //{
    //    configs = await prDataService.GetSystemConfigurationsAsync();
    //    UploadPath = configs.Where(y => y.ConfigName == "FUPATH")
    //        .Select(x => x.ConfigValue)
    //        .FirstOrDefault();
    //    int FuSize = Int32.Parse(configs.Where(y => y.ConfigName == "FUSIZE")
    //        .Select(x => x.ConfigValue)
    //        .FirstOrDefault());
    //    MaxUploadFileSize = FuSize;
    //}

    //private async Task SetApproveStatusA()
    //{
    //    await SetApproveFlowStatusAsync("A");
    //}

    //private async Task SetApproveStatusR()
    //{
    //    await SetApproveFlowStatusAsync("R");
    //}

    //private async Task SetApproveFlowStatusAsync(string status)
    //{
    //    isShowButton = false;
    //    myApproval_flow.Status = status;
    //    myApproval_flow.When_end = DateTime.Now;
    //    await prDataService.UpdateApprovalFlowAsync(myApproval_flow);
    //    // Enable Next Approval Flow
    //    Approval_flow resultApproval_flow;
    //    if (status == "A") // only Approved
    //    {
    //        switch (myApproval_flow.Approver_role)
    //        {
    //            case "A":
    //                // enable "C"
    //                resultApproval_flow = approval_Flows.Find(x => x.Approver_role == "C");
    //                if (resultApproval_flow != null)
    //                {
    //                    resultApproval_flow.Is_disabled = false;
    //                    await prDataService.UpdateApprovalFlowAsync(myApproval_flow);
    //                };
    //                break;
    //            case "C":
    //                resultApproval_flow = approval_Flows.Find(x => x.Approver_role == "S");
    //                if (resultApproval_flow != null)
    //                {
    //                    resultApproval_flow.Is_disabled = false;
    //                    await prDataService.UpdateApprovalFlowAsync(myApproval_flow);
    //                };
    //                break;
    //            case "S":
    //                resultApproval_flow = approval_Flows.Find(x => x.Approver_role == "D");
    //                if (resultApproval_flow != null)
    //                {
    //                    resultApproval_flow.Is_disabled = false;
    //                    await prDataService.UpdateApprovalFlowAsync(myApproval_flow);
    //                };
    //                break;
    //            case "D":
    //                resultApproval_flow = approval_Flows.Find(x => x.Approver_role == "L3");
    //                if (resultApproval_flow != null)
    //                {
    //                    resultApproval_flow.Is_disabled = false;
    //                    await prDataService.UpdateApprovalFlowAsync(myApproval_flow);
    //                };
    //                break;
    //            default:
    //                break;
    //        }
    //    }
    //    //Update PrHeader Status
    //    await CheckAndSetPrStatus();
    //    //this.IsVisible = false;
    //    navigationManager.NavigateTo("prform/" + thisPrId);
    //    this.StateHasChanged();
    //}

    private async Task CheckAndSetPrStatus()
    {
        // อันนี้ดูจาก PrItem รวมของทุก Item ใน Pr เดียวกัน
        List<Approval_flow> approval_Flows = await prDataService.GetApprovalFlowPrHeadAsync(thisPrId);
        Boolean allDMVerified = true;
        Boolean L3Available = false;

        //Boolean availableDM = false;
        // DM approve --> L3 or Purchasing

        foreach (Approval_flow approval_Flow in approval_Flows)
        {
            if (approval_Flow.Approver_role == "D")
            {
                if (approval_Flow.Status != "A")
                {
                    allDMVerified = false;
                }
            }
            if (approval_Flow.Approver_role == "L3")
            { L3Available = true; }
        }
        if (allDMVerified == true)
        {
            if (L3Available == true)
            {
                await prMainService.SetPrStatus(thisPrId, "PAL3");
            }
            else
                await prMainService.SetPrStatus(thisPrId, "PURS");
        }

        //foreach (Approval_flow approval_flow in approval_Flows)
        //{
        //    if (approval_flow.Status != "A")
        //    {
        //        switch (approval_flow.Approver_role)
        //        {
        //            case "A": // A ของ รายการนี้ Approve แล้ว

        //            case "C":
        //                allACVerified = false;
        //                break;
        //            case "S":
        //                allSMVerified = false;
        //                break;
        //            case "D":
        //                allDMVerified = false;
        //                break;
        //            default:
        //                break;
        //        }
        //    }
        //else
        //{
        //    if (approval_flow.Approver_role == "S")
        //    {
        //        availableSM = true;
        //    }
        //    if (approval_flow.Approver_role == "D")
        //    {
        //        availableDM = true;
        //    }
        //}

        //    if (allDMVerified) // && availableDM)
        //    {
        //        // determine next step ---> L3 or Purchasing

        //    }
        //    else if (allSMVerified) // && availableSM)
        //    {
        //        await SetPendingApproverSMDM(thisPrId, "PADM");
        //}
        //    else
        //    await SetPendingApproverSMDM(thisPrId, "PASM");
    }

    // NextStatus = PASM, PADM
    //private async Task SetPendingApproverSMDM(int PrId, string NextStatus)
    //{
    //    int SmDm = 0;
    //    await prDataService.SetPrStatus(PrId, NextStatus);
    //    switch (NextStatus)
    //    {
    //        case "PASM":
    //            //who is our SM
    //            SmDm = await prDataService.GetSmDmUserId(PrId, true);
    //            await prDataService.GenerateApprovalFlow(thisPrItem, "S", SmDm, 0, "N");
    //            break;
    //        case "PADM":
    //            //who is our DM
    //            SmDm = await prDataService.GetSmDmUserId(PrId, false);
    //            await prDataService.GenerateApprovalFlow(thisPrItem, "D", SmDm, 0, "N");
    //            break;
    //        default:
    //            break;
    //    }
    //}

    //public async Task DeleteAttach(int attachId)
    //{
    //    if (await JsRuntime.InvokeAsync<bool>("confirm", "Please confirm deleting this file."))
    //    {
    //        var fileName = await prDataService.DeleteUploadAttachAsync(attachId);
    //        File.Delete(env.WebRootPath + UploadPath + fileName);
    //    }
    //}

    // Upload File
    //private string Target { get; set; } = "body";
    //private bool IsVisibleChild { get; set; } = false;

    //private void OpenUploadDialog()
    //{
    //    this.Target = "#dialog.e-dialog";
    //    this.IsVisibleChild = true;
    //}
    //public void CloseUploadDialog()
    //{
    //    IsVisibleChild = false;
    //}

    //List<UploadFile> uploadFiles;
    //private async Task GetUploadFileList()
    //{
    //    // 1= PrItem
    //    uploadFiles = await prDataService.GetUploadFileListAsync(1, thisPrItem.Id);
    //}

    private void OnRnClick()
    {
        //IsVisible = false;
        navigationManager.NavigateTo($"RnForm/G/{thisPrId}/{thisPrItem.Id}");
    }

    private async Task onCloseItemSave()
    {
        thisPrItem.PR_Closed = !thisPrItem.PR_Closed;
        await prMainService.UpdatePRItemAsync(thisPrItem);
        await onDlgClose.InvokeAsync("");
    }

    //public async Task SetPurchaseComplete(bool PrClose)
    //{
    //    PRHeader thisPrHeader = await prMainService.GetPrHeaderAsync(thisPrId);

    //    var PurGroup = thisPrHeader.Purchasing_Group;
    //    // ผลลัพธ์ว่าจะไปที่ PD HO หรือ RY
    //    string Pd = "PCOMP";

    //    List<SystemConfiguration> Pds = await prDataService.GetSystemConfigurationsAsync("PD");

    //    string[] Pgs;
    //    foreach (var item in Pds)
    //    {
    //        Pgs = item.ConfigValue.Split(",");
    //        foreach (var g in Pgs)
    //        {
    //            if (PurGroup.StartsWith(g))
    //            {
    //                Pd = item.ConfigName;
    //            }
    //        }
    //    }

    //    thisPrHeader.Status = Pd;
    //    await prMainService.UpdatePrHeaderAsync(thisPrHeader);
    //}

    private async Task onSaveItemSave()
    {
        await prMainService.UpdatePRItemAsync(thisPrItem);
        await onDlgClose.InvokeAsync("");

    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PrOnWeb.Services.PrMainService prMainService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PrOnWeb.Services.PrDataService prDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Hosting.IWebHostEnvironment env { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> _UserManager { get; set; }
    }
}
#pragma warning restore 1591
