// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PrOnWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using PrOnWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using PrOnWeb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\bunlue\source\repos\PrOnWeb\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
using PrOnWeb.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
using PrOnWeb.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/prform/{PrId:int}")]
    public partial class PrForm : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 245 "C:\Users\bunlue\source\repos\PrOnWeb\Pages\PrForm.razor"
       
    // Authentication
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;
    ClaimsPrincipal MyClaims = new ClaimsPrincipal();
    int MyUserId;

    [Parameter] public int PrId { get; set; }

    string PrStatus;
    string PrStatusShort;
    vPRHeader prHeader;
    List<PRItem> prItems;
    PRItem prItem;
    List<UserTable> userTables;
    private bool isChecked = true;

    double prAmount = 0.00;

    string ShowCommandButton = "";

    int thisBudgetRange = 0;
    string thisBudgetRangeName = "";

    Approval_flow myApproval_flow;
    int myApprovalFlowId;
    List<vApproval_flow> thisPrApproval_Flows;
    string SmNamePDF = "";
    string DmNamePDF = "";
    string L3NamePDF = "";
    string L4NamePDF = "";
    string L5NamePDF = "";

    public bool IsVisible { get; set; } = false;
    private void OnDialogBtnClick()
    {
        IsVisible = false;
    }
    private void OnOpenButtonClick()
    {
        IsVisible = true;
    }
    private void OnRnClick()
    {
        IsVisible = false;
        navigationManager.NavigateTo($"/rnform/{PrId}/{prItem.Item_No}");
    }

    public class ApprValues
    {
        public string Text { get; set; }
        public Boolean isChecked { get; set; }
    }

    private List<ApprValues> apprFlow = new List<ApprValues>();
    //private string[] Approved;
    //List<string> LApproved = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        MyClaims = (await _authState).User;

        if (MyClaims.Identity.IsAuthenticated)
        {

            // Load Pr
            prHeader = await prDataService.GetvPrHeaderAsync(PrId);
            isCGConcerning = prHeader.Need_CG_Concerning;
            isSCAConcerning = prHeader.Need_SCA_Concerning;
            isISONeed = prHeader.Need_ISO;
            ObjectiveEdit = prHeader.Objective;

            prItems = await prDataService.GetPrItemAsync(PrId);
            PrStatus = prHeader.PrStatus;
            PrStatusShort = prHeader.Status;
            // NEW, PAAC, PACO, PASM, PADM, PAL3, PAL4, PAL5, PAPD, PURS, CLOS, PDEL, DELE
            prAmount = prHeader.PrAmt;
            userTables = await prDataService.GetUserTablesAsync();

            // state of button
            ShowCommandButton = "";
            //MyUserId = Int16.Parse(MyClaims.Claims.FirstOrDefault(c => c.Type == "PrUserId").Value);
            var myUserName = MyClaims.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name).Value;
            UserTable userTable = await prDataService.GetUserTableFromUseNameAsync(myUserName);
            MyUserId = userTable.Pr_User_Id;

            if (PrStatus == "New")
            {
                ShowCommandButton = "REQ";
                await CheckItemAccountCosign(); // do we need Accounting and CoSign approval ?
                await FindBudgetRange();
                await FindApprovers();
            }
            else
            {
                thisPrApproval_Flows = await prDataService.GetvApprovalFlowPrHeadAsync(PrId);
                //แสดง status ของ step ต่างๆ
                foreach (vApproval_flow approval_Flow in thisPrApproval_Flows)
                {
                    switch (approval_Flow.Approver_role)
                    {
                        case "A":
                            if (approval_Flow.Status == "A")
                            {
                                apprFlow.Add(new ApprValues { Text = "Accounting", isChecked = true });
                            }
                            else
                            {
                                apprFlow.Add(new ApprValues { Text = "Accounting", isChecked = false });
                                if (MyClaims.IsInRole("Accountings"))
                                {
                                    myApprovalFlowId = approval_Flow.Id; // ใช้ตอน approve
                                    ShowCommandButton = "APPR";
                                }
                            }
                            break;
                        case "C":
                            if (approval_Flow.Status == "A")
                            {
                                apprFlow.Add(new ApprValues { Text = "CoSign", isChecked = true });
                            }
                            else
                            {
                                apprFlow.Add(new ApprValues { Text = "CoSign", isChecked = false });
                                if (MyClaims.IsInRole("CoSigner"))
                                {
                                    myApprovalFlowId = approval_Flow.Id; // ใช้ตอน approve
                                    ShowCommandButton = "APPR";
                                }
                            }
                            break;
                        case "S":
                            SmName = approval_Flow.Approver_Name;
                            if (approval_Flow.Status == "A")
                            {
                                SmNamePDF = SmName;
                                apprFlow.Add(new ApprValues { Text = "SM:" + SmName, isChecked = true });
                            }
                            else
                            {
                                apprFlow.Add(new ApprValues { Text = "SM:" + SmName, isChecked = false });
                                if (approval_Flow.Approver_id == MyUserId) // this is me
                                {
                                    myApprovalFlowId = approval_Flow.Id; // ใช้ตอน approve
                                    ShowCommandButton = "APPR";
                                }
                            }

                            break;
                        case "D":
                            DmName = approval_Flow.Approver_Name;
                            if (approval_Flow.Status == "A")
                            {
                                DmNamePDF = DmName;
                                apprFlow.Add(new ApprValues { Text = "DM:" + DmName, isChecked = true });
                            }
                            else
                            {
                                apprFlow.Add(new ApprValues { Text = "DM:" + DmName, isChecked = false });
                                if (approval_Flow.Approver_id == MyUserId) // this is me
                                {
                                    myApprovalFlowId = approval_Flow.Id; // ใช้ตอน approve
                                    ShowCommandButton = "APPR";
                                }
                            }
                            break;
                        case "L3":
                            L3Name = approval_Flow.Approver_Name;
                            if (approval_Flow.Status == "A")
                            {
                                L3NamePDF = L3Name;
                                apprFlow.Add(new ApprValues { Text = "L3:" + L3Name, isChecked = true });
                            }
                            else
                            {
                                apprFlow.Add(new ApprValues { Text = "L3:" + L3Name, isChecked = false });
                                if (approval_Flow.Approver_id == MyUserId) // this is me
                                {
                                    myApprovalFlowId = approval_Flow.Id; // ใช้ตอน approve
                                    ShowCommandButton = "APPR";
                                }
                            }
                            break;
                        case "L4":
                            L4Name = approval_Flow.Approver_Name;
                            if (approval_Flow.Status == "A")
                            {
                                L4NamePDF = L4Name;
                                apprFlow.Add(new ApprValues { Text = "L4:" + L4Name, isChecked = true });
                            }
                            else
                            {
                                apprFlow.Add(new ApprValues { Text = "L4:" + L4Name, isChecked = false });
                                if (approval_Flow.Approver_id == MyUserId) // this is me
                                {
                                    myApprovalFlowId = approval_Flow.Id; // ใช้ตอน approve
                                    ShowCommandButton = "APPR";
                                }
                            }
                            break;
                        case "L5":
                            L5Name = approval_Flow.Approver_Name;
                            if (approval_Flow.Status == "A")
                            {
                                L5NamePDF = L5Name;
                                apprFlow.Add(new ApprValues { Text = "L5:" + L5Name, isChecked = true });
                            }
                            else
                            {
                                apprFlow.Add(new ApprValues { Text = "L5:" + L5Name, isChecked = false });
                                if (approval_Flow.Approver_id == MyUserId) // this is me
                                {
                                    myApprovalFlowId = approval_Flow.Id; // ใช้ตอน approve
                                    ShowCommandButton = "APPR";
                                }
                            }
                            break;

                        default:
                            break;
                    }
                }
            }
        }
    }

    //Check Item Account and Cosign
    bool Need_accounting = false;
    bool Need_Cosign = false;

    private async Task CheckItemAccountCosign()
    {
        foreach (PRItem prItem in prItems)
        {
            if (prItem.Cost_Center != "" || prItem.WBS_Code != "")
            {
                prItem.Need_Accounting = true; // กำลังจะไม่ต้องใช้
                Need_accounting = true;
            }
            // update this Item
            await prDataService.UpdatePRItemAsync(prItem);

            Need_Cosign = true;
        }

    }

    private async Task FindBudgetRange()
    {
        // find budget range
        // input : prAmount // find from BudgetRanges
        List<BudgetRange> budgetRanges = await prDataService.GetBudgetRangeAsync();
        foreach (BudgetRange budgetRange in budgetRanges)
        {
            if (budgetRange.Range_Oper == "LE")
            {
                if (prAmount <= budgetRange.Range_Amount)
                {
                    thisBudgetRange = budgetRange.Range_No;
                    thisBudgetRangeName = budgetRange.Range_Name;
                    break;
                }
            }
            else
            {
                if (prAmount > budgetRange.Range_Amount)
                {
                    thisBudgetRange = budgetRange.Range_No;
                    thisBudgetRangeName = budgetRange.Range_Name;
                    break;
                }
            }
        }
    }

    // Set approver
    // SM, DM ได้จาก ODS อยู่แล้ว
    // L3,4,5 ขึ้นกับ BudgetRange
    int SmId = 0;
    int DmId = 0;
    int L3Id = 0;
    int L4Id = 0;
    int L5Id = 0;
    string SmName = "";
    string DmName = "";
    string L3Name = "";
    string L4Name = "";
    string L5Name = "";

    private async Task FindApprovers()
    {
        List<vWorkflowAutho> workflowAuthos;
        workflowAuthos = await prDataService.GetvWorkflowAuthoAsync(prHeader, "BudgetRange" + thisBudgetRange);
        foreach (vWorkflowAutho workflowAutho in workflowAuthos)
        {
            switch (workflowAutho.Wf_Order)
            {
                case 1:
                    SmId = workflowAutho.User_Id;
                    SmName = workflowAutho.UserName;
                    break;
                case 2:
                    DmId = workflowAutho.User_Id;
                    DmName = workflowAutho.UserName;
                    break;
                case 3:
                    L3Id = workflowAutho.User_Id;
                    L3Name = workflowAutho.UserName;
                    break;
                case 4:
                    L4Id = workflowAutho.User_Id;
                    L4Name = workflowAutho.UserName;
                    break;
                case 5:
                    L5Id = workflowAutho.User_Id;
                    L5Name = workflowAutho.UserName;
                    break;
                default:
                    break;
            }
        }
    }

    private async Task SetFinalized()
    {
        string nextPrStatus = "PASM"; // ถ้าไม่มี Account,Cosign จะไปที่ SM
                                      // set L3,L4,L5 ไว้ก่อน แต่ยัง disable
                                      // 1- Acc, 2- CoSign, 3- SM, 4- DM, 5- L3, 6- L4, 7- L5
        if (L3Id != 0)
        {
            await prDataService.GenerateApprovalFlowHead(prHeader, "L3", L3Id, 0, "N", 5, true);
        }
        if (L4Id != 0)
        {
            await prDataService.GenerateApprovalFlowHead(prHeader, "L4", L4Id, 0, "N", 6, true);
        }
        if (L5Id != 0)
        {
            await prDataService.GenerateApprovalFlowHead(prHeader, "L5", L5Id, 0, "N", 7, true);
        }

        if (Need_accounting)
        {
            await prDataService.GenerateApprovalFlow(PrId, 0, "A", 0, 0, "N", 1, false);
            nextPrStatus = "PAAC";
        }
        if (Need_Cosign)
        {
            if (Need_accounting)
            {
                await prDataService.GenerateApprovalFlow(PrId, 0, "C", DmId, 0, "N", 2, true);
            }
            else
            {
                await prDataService.GenerateApprovalFlow(PrId, 0, "C", DmId, 0, "N", 2, false);
                nextPrStatus = "PACS";
            }
        }
        await prDataService.GenerateApprovalFlow(PrId, 0, "S", SmId, 0, "N", 3, true);
        await prDataService.GenerateApprovalFlow(PrId, 0, "D", DmId, 0, "N", 4, true);

        //*** ย้ายออกนอก loop เปลี่ยนจาก peritem เป็น perdoc

        //foreach (PRItem prItem in prItems)
        //{
        //    // set SM, DM สำหรับ ทุก item ไว้ก่อน แต่ยัง disable
        //    await prDataService.GenerateApprovalFlow(Id, prItem, "S", SmId, 0, "N", 1, true);
        //    await prDataService.GenerateApprovalFlow(Id, prItem, "D", DmId, 0, "N", 2, true);

        //    if (prItem.Need_Accounting)
        //    {
        //        // accounting don't need group id
        //        await prDataService.GenerateApprovalFlow(Id, prItem, "A", 0, 0, "N", 0, false);
        //        if (prItem.Need_cosign)
        //        {
        //            await prDataService.GenerateApprovalFlow(Id, prItem, "C", 0, prItem.Co_signer_id, "N", 0, true);
        //        }
        //    }
        //    else // don't need Accounting
        //    {
        //        if (prItem.Need_cosign)
        //        {
        //            await prDataService.GenerateApprovalFlow(Id, prItem, "C", 0, prItem.Co_signer_id, "N", 0, false);
        //        }
        //    }
        //}
        await prDataService.SetPrStatus(prHeader, nextPrStatus);
        navigationManager.NavigateTo("/prlist");
    }

    float ItemAmt;
    PrItemDetail prItemDetail;
    private async Task LoadSingleItem(PRItem prItem1)
    {
        IsVisible = true;
        //prItem = await prDataService.GetSinglePrItemAsync(Id, prItem1.Item_No);
        await prItemDetail.InitThisItem(prItem1, PrId);
    }

    private void Navigate(PRItem prItem1)
    {
        navigationManager.NavigateTo($"/pritem/{PrId}/{prItem1.Item_No}");
    }

    public void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }

    private async Task SetApproveStatusA()
    {
        await SetApproveFlowStatusAsync("A");
    }

    private async Task SetApproveStatusR()
    {
        await SetApproveFlowStatusAsync("R");
    }

    private async Task SetApproveFlowStatusAsync(string status)
    {
        string nextApproverRole;
        string nextPRStatus = "";

        myApproval_flow = await prDataService.GetApprovalFlowFromIdAsync(myApprovalFlowId);

        myApproval_flow.Status = status;
        myApproval_flow.When_end = DateTime.Now;
        await prDataService.UpdateApprovalFlowAsync(myApproval_flow);
        nextApproverRole = await prDataService.UpdateApprovalFlowEnableNext(myApproval_flow);
        // Update PR Status
        switch (nextApproverRole)
        {
            case "C":
                nextPRStatus = "PACS";
                break;
            case "S":
                nextPRStatus = "PASM";
                break;
            case "D":
                nextPRStatus = "PADM";
                break;
            case "L3":
            case "L4":
            case "L5":
                nextPRStatus = "PA" + nextApproverRole;
                break;
            case "":
                nextPRStatus = "";
                break;
            default:
                break;
        }
        PRHeader thisPrHeader = await prDataService.GetPrHeaderAsync(prHeader.Id);
        thisPrHeader.Status = nextPRStatus;
        await prDataService.UpdatePrHeaderAsync(thisPrHeader);
        StateHasChanged();
        navigationManager.NavigateTo("/PrList");
    }

    Boolean isCGConcerning = false;
    Boolean isSCAConcerning = false;
    Boolean isISONeed = false;
    String ObjectiveEdit;

    Boolean isReqReadOnly = true;
    string EditBtn = "Edit";

    private async Task EditReq()
    {
        if (isReqReadOnly)
        {
            isReqReadOnly = false;
            EditBtn = "Save";
        }
        else
        {
            PRHeader ActualPrHeader = await prDataService.GetPrHeaderAsync(PrId);

            ActualPrHeader.Need_CG_Concerning = isCGConcerning;
            ActualPrHeader.Need_SCA_Concerning = isSCAConcerning;
            ActualPrHeader.Need_ISO = isISONeed;
            ActualPrHeader.Objective = ObjectiveEdit;
            await prDataService.UpdatePrHeaderAsync(ActualPrHeader);
            isReqReadOnly = true;
            EditBtn = "Edit";
        }
    }
    private void CancelReq()
    {
        isReqReadOnly = true;
        EditBtn = "Edit";
        isCGConcerning = prHeader.Need_CG_Concerning;
        isSCAConcerning = prHeader.Need_SCA_Concerning;
        isISONeed = prHeader.Need_ISO;
        ObjectiveEdit = prHeader.Objective;
    }

    public void PrintPrForm(MouseEventArgs args)
    {
        string isTPAC = "";
        string isTPCC = "";
        // prepare data
        if (prHeader.Company == "TPAC")
        {
            isTPAC = "X";
        }
        else if (prHeader.Company == "TPCC")
        {
            isTPCC = "X";
        }

        float SubTotal = 0;
        float TotalAmt = 0;


        var Params = new Dictionary<string, string>() {
            {"PR_No", prHeader.Pr_No},
            {"Objective",prHeader.Objective},
            {"Budget",prHeader.sPrAmt},
            {"Department", prHeader.Department},
            {"Requester", prHeader.Requester },
            {"SMName",SmNamePDF },
            {"DMName",DmNamePDF },
            {"L3Name",L3NamePDF },
            {"L4Name",L4NamePDF },
            {"L5Name",L5NamePDF },
            {"isTPAC",isTPAC },
            {"isTPCC",isTPCC }
        };
        for (int i = 0; i < prItems.Count; i++)
        {
            SubTotal = prItems[i].Price_PR * prItems[i].Quantity / prItems[i].Price_Unit;
            TotalAmt += SubTotal;

            Params.Add("Item_" + i.ToString(), (i+1).ToString());
            Params.Add("Item_Description_" + i.ToString(), prItems[i].Item_Description);
            Params.Add("Quantity_" + i.ToString(), prItems[i].Quantity.ToString() + "  " + prItems[i].UOM);
            Params.Add("Material_Group_" + i.ToString(), prItems[i].Material_Group);
            Params.Add("Cost_" + i.ToString(), SubTotal.ToString("N"));
            Params.Add("WBS_" + i.ToString(), prItems[i].WBS_Code);
            Params.Add("DateNeed_" + i.ToString(), prItems[i].Delivery_date.ToString("d/M/yyyy"));
        }
        Params.Add("TotalAmt" , TotalAmt.ToString("N"));

        var pdf = new PrOnWeb.PDF.Report7();
        pdf.OpenNewTab(js, Params, prItems.Count, "Report.PDF");
    }
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> _UserManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PrOnWeb.Services.PrDataService prDataService { get; set; }
    }
}
#pragma warning restore 1591
