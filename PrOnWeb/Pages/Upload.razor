@page "/Upload"
@using Syncfusion.Blazor.Inputs
@using System.IO
@using System.Security.Claims;
@inject PrOnWeb.Services.PrDataService prDataService
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@inject NavigationManager navigationManager

<EditForm Model="@uploadFile" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <SfTextBox Placeholder="Description"
                   @ref="@description"></SfTextBox>
    </div>
    <div class="form-group">
        <SfUploader @ref="UploadObj" ID="UploadFiles" MaxFileSize="@MaxUploadFileSize" AutoUpload="false">
            <UploaderEvents ValueChange="OnChange"></UploaderEvents> 
        </SfUploader>
    </div>
    @*<button type="submit" class="btn btn-primary">Upload</button>*@
</EditForm>

@code {
    [Parameter] public int DocumentType { get; set; }
    [Parameter] public int DocumentId { get; set; }
    [Parameter] public EventCallback<string> OnDNComplete { get; set; }
    public int MaxUploadFileSize = 10000000;
    public string UploadPath = "/images/";

    SfUploader UploadObj;
    SfTextBox description;
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    private void SuccessHandler(SuccessEventArgs args)
    {
        // Here, you can customize your code.
    }

    public async Task OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            var path = env.WebRootPath + UploadPath + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();
            await SaveUploadDetail(file.FileInfo.Name);
        }

        await OnDNComplete.InvokeAsync("");
    }


    public UploadFile uploadFile = new UploadFile();

    public async Task HandleValidSubmit()
    {
        await this.UploadObj.Upload(); // Upload the selected file manually
    }

    public async Task SaveUploadDetail(string UploadFileName)
    {
        //must be authenticated
        CurrentUser = (await _authState).User;
        int UserId = Int32.Parse(CurrentUser.Claims.FirstOrDefault(c => c.Type == "PrUserId").Value);

        // Insert new upload record
        // 1= Pr Item Attachment
        // 2= Rn Attachment
        var NewUpload = new UploadFile
        {
            Upload_Type = DocumentType,
            Document_id = DocumentId,
            Filename = UploadFileName,
            Description = description.Value,
            Who = UserId,
            When = DateTime.Now,
            Status = "NEW"
        };
        int NewId = await prDataService.InsertUploadFileAsync(NewUpload);
        string NewFileName = NewId.ToString() + "_" + UploadFileName;
        File.Move(env.WebRootPath + UploadPath + UploadFileName, env.WebRootPath + UploadPath + NewFileName);
    }

}
