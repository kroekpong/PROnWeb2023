@page "/prreport"
@using System.Security.Claims
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@inject PrOnWeb.Services.PrDataService prDataService
@inject PrOnWeb.Services.PrMainService prMainService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (PrReports == null)
{
<p><em>No Data...</em></p>
}
else
{
<h3>PR Report</h3>
<div class="row" style="margin-bottom: 5px;">
    <div class="col-2">
        <SfCheckBox @bind-Checked="@isChecked" @onclick="@onClickCheck">Date need filter </SfCheckBox>
    </div>
    <div class="col-3">
        <SfDateRangePicker Placeholder="Choose a Range" ShowClearButton="true" Readonly="@(!isChecked)"
                           @bind-StartDate="@StartValue" @bind-EndDate="@EndValue" Format="dd/MM/yyyy">
        </SfDateRangePicker>
    </div>
    <div class="col-2">
        <SfButton @onclick="clickFilter" IsPrimary="true" Disabled="!isChecked">Apply Filter</SfButton>
    </div>
</div>

<SfGrid ID="Grid_PrReport" @ref="GridRef" DataSource="@PrReports" AllowPaging="true" AllowGrouping="true" AllowResizing="true"
        AllowFiltering="true" AllowSorting="true" Toolbar="@(new List<string>() { "Print", "ExcelExport", "Search" })" AllowExcelExport="true">
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="PrReportModel"></GridEvents>
    <GridColumns>
        @*<GridColumn Field=@nameof(PrReportModel.Pr_No) HeaderText="PR NO." TextAlign="TextAlign.Center" Width="120">
        </GridColumn>*@
         <GridColumn Field=@nameof(PrReportModel.Pr_No) HeaderText="SAP PR" TextAlign="TextAlign.Center" Width="100">
                <Template>
                    @{
                        var prHeader0 = (context as PrReportModel);
                        <div><a href="@navigationManager.Uri" @onclick="@(() =>  navigationManager.NavigateTo($"prform/{prHeader0.Id}"))">@prHeader0.Pr_No</a></div>
                    }
                </Template>
            </GridColumn>

        <GridColumn Field=@nameof(PrReportModel.Tracking_No) HeaderText="Tracking No." Width="100"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Item_No) HeaderText="Item" Width="63">
            <Template>
                @{
                    var pr0 = (context as PrReportModel);
                    <div style="text-align: center;">@pr0.Item_No.TrimStart(new Char[] { '0' })</div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Item_Description) HeaderText="Desciption" Width="218"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Quantity) HeaderText="Quantity" Width="100" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.UOM) HeaderText="Unit" Width="55"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Item_Code) HeaderText="MAT code" Width="95" TextAlign="TextAlign.Right">
            <Template>
                @{
                    var pr0 = (context as PrReportModel);
                    <div>@pr0.Item_Code.TrimStart(new Char[] { '0' })</div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Budget) HeaderText="Budget" Width="95" Format="n2" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Date_Need) HeaderText="Date need" Width="100" Format="d/M/yyyy"></GridColumn>
            <GridColumn Field=@nameof(PrReportModel.Location) HeaderText="Purchasing Team" Width="100"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Company) HeaderText="Company" Width="77"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Plant) HeaderText="Plant" Width="77"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Department) HeaderText="Dept" Width="60"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Staff_assign_date) HeaderText="Date received" Width="100" Format="d/M/yyyy"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Purchasing_Staff) HeaderText="Purchaser" Width="100"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Requester) HeaderText="Requester" Width="100"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.PrStatus) HeaderText="Status" Width="100"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.Pr_Closed) HeaderText="PR Close" Width="100">
            <Template>
                @{
                    var pritm = (context as PrReportModel);
                    var closeTxtx = pritm.Pr_Closed? "Closed" : "";
                    var closeCls = pritm.Pr_Closed ? "text-danger" : "";
                     <span class="@closeCls">@closeTxtx</span>
                }
            </Template>
        </GridColumn>
        @*<GridColumn Field=@nameof(PrReportModel.UserName) HeaderText="Pending At" Width="100"></GridColumn>*@
        <GridColumn Field=@nameof(PrReportModel.PendingDay) HeaderText="Pending days" Width="100" TextAlign="TextAlign.Right"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.PO_No) HeaderText="PO.No" Width="100"></GridColumn>
        <GridColumn Field=@nameof(PrReportModel.PO_DATE) HeaderText="PO Issue" Width="100" Format="d/M/yyyy"></GridColumn>
            <GridColumn Field=@nameof(PrReportModel.GRDate) HeaderText="GR Date" Width="100" Format="d/M/yyyy"></GridColumn>
    </GridColumns>
</SfGrid>
}

<style>
    .e-extlink:before {
        content: '\e785';
    }

    .e-grid .e-headercelldiv {
        font-size: 12px;
        text-align: center;
    }

    .e-grid .e-rowcell {
        font-size: 12px;
    }

    .b-button {
        margin: 5px 0px 0px 10px;
    }
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;
    ClaimsPrincipal MyClaims = new ClaimsPrincipal();
    SfGrid<PrReportModel> GridRef;

    List<PrReportModel> PrReports;
    private string fullName;

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    public DateTime? StartValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? EndValue { get; set; }
    int myUserId;
    string myCompanies;
    string myDepartment;
    string mySection;
    string filter;
    bool isChecked = false;

    protected override async Task OnInitializedAsync()
    {
        //vPrLists = await prDataService.GetVPrListAsync();

        authState = await _authState;
        MyClaims = (await _authState).User;

        if (MyClaims.Identity.IsAuthenticated)
        {
            //Layout.SidebarToggle = false;
            EndValue = StartValue.Value.AddMonths(1);
            var myUserName = MyClaims.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name).Value;
            myUserId = Int16.Parse(MyClaims.Claims.FirstOrDefault(c => c.Type == "PrUserId").Value);
            myCompanies = await prDataService.GetCompaniesFromUserIdAsync(myUserId);

            filter = "'CSSE','CSIT','CSQC','CSAD','PAAC','PASM','PADM','PAL3','PAL4','PAL5','PAL2','PAL6','PDHO','PDRY','RN','PCOMP'";
            PrReports = await prDataService.GetPrReportAsync(filter, myCompanies);
        }
    }

    private async Task clickFilter()
    {
        string startDate = (StartValue ?? DateTime.Now).ToString("dd/MM/yyyy");
        string endDate = (EndValue ?? DateTime.Now).ToString("dd/MM/yyyy");
        PrReports = await prDataService.GetPrReportAsync(filter, myCompanies, startDate, endDate);
        GridRef.Refresh();
    }

    private async Task onClickCheck()
    {
        isChecked = !isChecked;
        if (!isChecked)
        {
            PrReports = await prDataService.GetPrReportAsync(filter, myCompanies);
            GridRef.Refresh();
        }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_PrReport_excelexport") //Id is combination of Grid's ID and itemname
        {
            await this.GridRef.ExcelExport();
        }
    }

}
